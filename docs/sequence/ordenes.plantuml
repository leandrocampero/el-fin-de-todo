@startuml Crear Órdenes
  !theme default from ../
  '#############################################################################
  title Crear Órdenes
  '#############################################################################
  'Definir actores y entidades participantes
  actor Usuario as user
  participant "Aplicacion\n(Cliente)" as app
  participant "Metamask\n(Wallet)" as wallet
  participant "Contrato de Plataforma\n(Blockchain)" as contrato
  participant "ChainLink \n(Oraculo)" as oraculo
  participant "Contrato ERC20 \n(Token)" as token

  '#############################################################################
  'Iniciar secuencia
  user -> app: [Crear Órden] nuevaOrden(...)
  note right
    Parámetro: {
      tokenCompra: string
      tokenVenta: string
      montoCompra: bigint
      montoCompra: bigint
      tipo: number
    }
  end note
  activate app
    app -> contrato: buscarGemela(...): boolean
    note right
      Se pasa como paraámetros los mismos
      usados para crear la orden
    end note

    alt No existe una orden espejada
      app -> wallet: [CU04 - Confirmar Acción]

      app -> contrato: nuevaOrden(...)
      note over contrato
        El contrato se encarga de realizar los 
        controles necesarios para crear la orden
      end note

      activate contrato
        contrato -> contrato: consultarCotizacion(token: string): bigint
        activate contrato
          contrato -> oraculo: latestRoundData(): bigint
          note left
            Usado para determinar si el monto de
            venta es superior al mínimo impuesto
            por la plataforma
          end note
        deactivate contrato

        contrato -> token: balanceOf(address: string): bigint
        note left
          Usado para determinar si la billetera
          tiene fondos suficientes para depositar
          y crear la orden
        end note

        contrato -> token: allowance(owner: string, spender: string): bigint
        note left
          Usado para determinar si el usuario
          autorizó un al contrato de plataforma
          transferir el monto a depositar para
          crear la orden
        end note

        contrato -> token: transferFrom(from: string, to: string, amount: bigint): boolean
        note left
          Transferir los tokens del vendedor al
          contrato para tener la custodia hasta
          que la orden se ejecute
        end note
      deactivate contrato
    else Existe una orden espejada
      app -> user: [Mensaje: existe una orden\nespejo para ejecutar]
    end
  deactivate app
@enduml


'-------------------------------------------------------------------------------
'-------------------------------------------------------------------------------


@startuml Ejecutar Órdenes
  !theme default from ../
  '#############################################################################
  title Ejecutar Órdenes
  '#############################################################################
  'Definir actores y entidades participantes
  actor Usuario as user
  participant "Aplicacion\n(Cliente)" as app
  participant "Metamask\(Wallet)" as wallet
  participant "Contrato de Plataforma\n(Blockchain)" as contrato
  participant "ChainLink \n(Oraculo)" as oraculo
  participant "Contrato ERC20 \n(Token de Compra)" as tokenCompra
  participant "Contrato ERC20 \n(Token de Venta)" as tokenVenta

  '#############################################################################
  'Iniciar secuencia
  user -> app: [Listar Órdenes]\nlistarOrdenesActivas()\n: Array<Orden>
  activate app
    note over contrato
      A través del mismo método (en base
      al tipo de órden y estado) se pueden
      realizar los casos de uso:
      * CU22 - Ver Mis Órdenes
      * CU26 - Listar órdenes
      * CU28 - Mostrar Historial de Órdenes
    end note
    
    app -> contrato: listarOrdenes(puntoPartida: string, ventana: int):\nArray<Ordenes>
    activate app
    deactivate app
  deactivate app

  user -> app: ejecutarOrden(idOrden: string)
  activate app
    app -> wallet: [CU04 - Confirmar Acción]

    app -> contrato: ejecutarOrden(idOrden: string)
    activate contrato
      note over contrato
        El contrato se encarga de realizar los 
        controles necesarios para ejecutar la orden
      end note

      group Tipo de órden: Intercambio
        note over contrato
          En el caso de ordenes de intercambio se
          tiene que consultar las cotizaciones
          para poder determinar la relación de cambio
          entre ambos tokens en participantes
        end note
        contrato -> contrato: consultarCotizacion(token: string): bigint
        activate contrato
          contrato -> oraculo: latestRoundData(): bigint
        deactivate contrato

        contrato -> contrato: consultarCotizacion(token: string): bigint
        activate contrato
          contrato -> oraculo: latestRoundData(): bigint
        deactivate contrato

      end

      contrato -> tokenCompra: balanceOf(address: string): bigint
      note left
        Consultar fondos de la billetera
        compradora (monto del token a 
        comprar)
      end note

      contrato -> tokenCompra: allowance(owner: string, spender: string): bigint
      note left
        Consultar la autorización del usuario
        para que el contrato de plataforma 
        pueda ransferir los tokens de compra
        al vendedor (creador de la orden)
      end note

      contrato -> tokenCompra: transferFrom(from: string, to: string, amount: bigint): boolean
      note left
        Transferir los tokens del comprador
        al vendedor
      end note

      contrato -> tokenVenta: transfer(from: string, to: string, amount: bigint): boolean
      note left
        Transferir los tokens del vendedor
        (guardados en el contrato de 
        plataforma) al comprador
      end note
    deactivate contrato
  deactivate app
@enduml